import "../standard/io.rf";

native void exit(int code);

int main() {
    using std;
    cstring str;

    printf("[ printf ]: Printing to stdout without formatting.\n");
    printf("[ printf ]: Printing to stdout with formatting, string: `%s`, int: %d, float: %f.\n", "This string text is inserted through formatting", 69, 420.69);
    fprintf(stdout, "[ fprintf ]: Printing to stdout for testing `fprintf`.\n");
    fprintf(stdin, "[ fprintf ]: Printing to stdin for testing `fprintf` (Altough you might not see it lol and if you can see this then... bro wtf).\n");
    fprintf(stderr, "[ fprintf ]: Printing to stderr for testing `fprintf`.\n");
    printf("[ printf ]: For testing scanf type something: ");
    scanf("%[^\n]", str);
    printf("[ scanf ]: You typed: %s\n", str);
    printf("---- FILE IO ----\n");
    FILE *FileWritePtr = fopen("fileIOWriteTest.txt", "w");
    FILE *FileReadPtr = fopen("fileIOReadTest.txt", "r");

    if (FileWritePtr == nullptr) {
        perror("[ perror ]: Could not open file `fileIOWriteTest.txt`.");
        exit(1);
    } else if (FileReadPtr == nullptr) {
        perror("[ perror ]: Could not open file `fileIOReadTest.txt` maybe it does not exist lol.");
    }

    fprintf(FileWritePtr, "This is write test to `FileWritePtr` stream in file `fileIOTest`.");
    fprintf(stdout, "[ fprintf ]: Wrote to file stream of `fileIOWriteTest.txt`.\n");
    fprintf(stdout, "[ fprintf ]: Reading from file stream of `fileIOReadTest.txt`, It says: '");
    do {
        char c = (char)fgetc(FileReadPtr);
        fprintf(stdout, "%c", c);
    } while (feof(FileReadPtr) == 0);
    fprintf(stdout, "'\n");

    FILE *FileClearerrPtr = fopen("fileClearerrTest.txt", "r");
    fputc(88, FileClearerrPtr);
    if (ferror(FileClearerrPtr) != 0) {
        perror("[ perror ]: This is an intentional error created to test function: `clearerr`.");
        clearerr(FileClearerrPtr);
    }
    fgetc(FileClearerrPtr);
    if (ferror(FileClearerrPtr) == 0) {
        printf("[ printf ]: Number of errors on file: %d `clearerr` works as expected.\n", ferror(FileClearerrPtr));
    } else {
        printf("[ printf ]: `clearerr` function does not work as expected.\n");
    }

    int c;
    int n;
    fpos_t pos;

    c = fgetc(FileReadPtr);
    printf("------ FILE fgetc ------\n");
    for(int i = 0; i < 10; i++) {
        fgetpos(FileReadPtr, &pos);
        printf("[ fgetc ]: Character at position %d is %c\n", pos, c);
        c = fgetc(FileReadPtr);
    }
    printf("------ FILE fgetc END------\n");

    fclose(FileWritePtr);
    fclose(FileReadPtr);
    fclose(FileClearerrPtr);

    fprintf(stdout, "\n\nTEST INFO: Successfully tested functions: `printf`, `fprintf`, `perror`, `fgetc`, `feof`, `fputc`, `fclose`, `fopen`, `ferror`, `scanf`, `exit`, And: FILE* stderr, FILE* stdout, FILE* stdin.\n");
    return 0;
}